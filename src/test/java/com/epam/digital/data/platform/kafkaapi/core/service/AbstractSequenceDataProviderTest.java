/*
 * Copyright 2022 EPAM Systems.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.epam.digital.data.platform.kafkaapi.core.service;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

import com.epam.digital.data.platform.kafkaapi.core.exception.PatternException;
import com.epam.digital.data.platform.kafkaapi.core.impl.sequencedata.TestEntityWithAutoGeneratedValueSequenceDataProvider;
import java.time.format.DateTimeFormatter;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

@ExtendWith(SpringExtension.class)
@ContextConfiguration(classes = TestEntityWithAutoGeneratedValueSequenceDataProvider.class)
class AbstractSequenceDataProviderTest {

  @Autowired
  private TestEntityWithAutoGeneratedValueSequenceDataProvider provider;

  @MockBean
  SequenceGenerator sequenceGenerator;

  @Test
  void successfulGeneration() {
    var dateTimeFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy/HH:mm:ss");
    when(sequenceGenerator.nextValue(
        "test_entity_with_auto_generated_value_auto_generated_number_seq")).thenReturn(346L);

    var result = provider.generate("auto_generated_number");

    assertDoesNotThrow(() -> dateTimeFormatter.parse(result.substring(3, 22)));
    assertThat(result).startsWith("АА/").endsWith("346");
  }

  @Test
  void exceptionWhenIncorrectPattern() {
    assertThrows(PatternException.class, () -> provider.generate("auto_generated_number2"));
  }

  @Test
  void shouldValidateCorrectValue() {
    assertDoesNotThrow(
        () -> provider.validate("auto_generated_number", "АА/17-08-2022/12:25:10/544"));
  }

  @Test
  void exceptionWhenInvalidValue() {
    assertThrows(PatternException.class, () -> provider.validate(
        "auto_generated_number", "АБ/17-08-2022/12:25:10/544"));
  }
}