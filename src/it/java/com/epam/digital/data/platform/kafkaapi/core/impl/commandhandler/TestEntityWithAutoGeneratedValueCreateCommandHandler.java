/*
 * Copyright 2021 EPAM Systems.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.epam.digital.data.platform.kafkaapi.core.impl.commandhandler;

import com.epam.digital.data.platform.kafkaapi.core.commandhandler.AbstractCreateCommandHandler;
import com.epam.digital.data.platform.kafkaapi.core.commandhandler.util.EntityConverter;
import com.epam.digital.data.platform.kafkaapi.core.impl.model.TestEntityWithAutoGeneratedValue;
import com.epam.digital.data.platform.kafkaapi.core.impl.sequencedata.TestEntityWithAutoGeneratedValueSequenceDataProvider;
import com.epam.digital.data.platform.kafkaapi.core.impl.tabledata.TestEntityWithAutoGeneratedValueTableDataProvider;
import com.epam.digital.data.platform.model.core.kafka.Request;
import org.springframework.stereotype.Service;

@Service
public class TestEntityWithAutoGeneratedValueCreateCommandHandler
    extends AbstractCreateCommandHandler<TestEntityWithAutoGeneratedValue> {

  private final TestEntityWithAutoGeneratedValueSequenceDataProvider sequenceProvider;

  public TestEntityWithAutoGeneratedValueCreateCommandHandler(
      EntityConverter<TestEntityWithAutoGeneratedValue> entityConverter,
      TestEntityWithAutoGeneratedValueTableDataProvider tableDataProvider,
      TestEntityWithAutoGeneratedValueSequenceDataProvider sequenceProvider) {
    super(entityConverter, tableDataProvider);
    this.sequenceProvider = sequenceProvider;
  }

  @Override
  public void requestPreprocessor(Request<TestEntityWithAutoGeneratedValue> request) {
    if (request.getPayload().getAutoGeneratedNumber() == null) {
      request.getPayload()
          .setAutoGeneratedNumber(sequenceProvider.generate("auto_generated_number"));
    } else {
      sequenceProvider.validate("auto_generated_number",
          request.getPayload().getAutoGeneratedNumber());
    }
  }
}

